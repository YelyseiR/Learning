package javaCoreModule11.exercise4;

import java.util.stream.Stream;

public class LinearCongruentGenerator {
    public static Stream<Long> generateRandomStream(long a, long c, long m, long seed) {
        // Використовуючи Stream.iterate, створюємо безкінечний стрім випадкових чисел,
        // який генерується за допомогою лінійного конгруентного методу
        return Stream.iterate(seed, x -> (a * x + c) % m);
    }

    public static void main(String[] args) {
        // Задаємо параметри генерації випадкових чисел згідно із завланням
        long a = 25214903917L;
        long c = 11L;
        long m = (long) Math.pow(2, 48); // 2 в степені 48   2^48
        /**
         * Метод Math.pow() - це стандартний математичний метод в Java, який використовується
         *  для піднесення числа до заданого степеня.
         * Синтаксис методу Math.pow():
         * Math.pow(base, exponent);
         * де:
         * - base - число, яке буде піднесене до степеня;
         * - exponent - степінь, до якої підноситься число.
         * Наприклад, якщо викликати метод Math.pow(2, 3), то це означає, що 2 буде піднесене до 3 степеня,
         * тобто математично це виглядатиме так: 2³ = 8.
         * Метод Math.pow() повертає результат у вигляді значення дійсного числа типу double.
         *  Результат можна привести до іншого типу даних, як, наприклад, до long або int,
         *  за допомогою явного приведення типів.
         */
        long seed = 0; // Проставляємо сід або "зерно" - це початкове значення для створення генерації випадкових чисел
        //починаючи від зазнеченого числа й почнеться генерація чисел, в нашому випадку - від 0, згідно завданню.

        // Генеруємо безкінечний стрім випадкових чисел
        Stream<Long> randomStream = generateRandomStream(a,c,m, seed);
        randomStream.limit(10).forEach(System.out::println);  // Лімітуємо стрім випадкових чисел у консоль
    }
}

/**
 * В цьому методі ми задаємо параметри генерації випадкових чисел (a, c, m та seed), генеруємо безкінечний
 стрім випадкових чисел за допомогою методу generateRandomStream і потім виводимо перші 10 елементів цього стріму.
 У методі generateRandomStream ми використовуємо Stream.iterate, щоб створити безкінечний стрім чисел. Функція
 iterate приймає початкове значення (seed) і функцію, яка приймає поточне значення та повертає наступне. У нашому
 випадку функція обчислює наступне випадкове число
 за формулою лінійного конгруентного методу (x[n + 1] = 1 (a x[n] + c) % m).

 Також цікавий варіант почати генерувати числа виставивши у seed як значення мілісекунд від початку епохи Юнікс.
 Епоха Unix - це початкова дата, яка використовується в операційних системах Unix та Unix-подібних системах для
 вирахування поточного часу. Епоха Unix починається 1 січня 1970 року 00:00:00 UTC. У Java час можна отримати,
 викликавши метод System.currentTimeMillis(), який поверне кількість мілісекунд, що пройшли з початку епохи Unix
 до поточного моменту. Зазвичай цей метод використовують як насіння (seed) для генерації випадкових чисел, оскільки
 наносекундний час оновлюється на кожному виклику, що дозволяє створювати приблизно випадкові послідовності.
 */